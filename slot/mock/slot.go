// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/parking_lot/slot (interfaces: ParkingSlot)

// Package mock is a generated GoMock package.
package mock

import (
	vehicle "example.com/parking_lot/vehicle"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockParkingSlot is a mock of ParkingSlot interface
type MockParkingSlot struct {
	ctrl     *gomock.Controller
	recorder *MockParkingSlotMockRecorder
}

// MockParkingSlotMockRecorder is the mock recorder for MockParkingSlot
type MockParkingSlotMockRecorder struct {
	mock *MockParkingSlot
}

// NewMockParkingSlot creates a new mock instance
func NewMockParkingSlot(ctrl *gomock.Controller) *MockParkingSlot {
	mock := &MockParkingSlot{ctrl: ctrl}
	mock.recorder = &MockParkingSlotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParkingSlot) EXPECT() *MockParkingSlotMockRecorder {
	return m.recorder
}

// Distance mocks base method
func (m *MockParkingSlot) Distance() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distance")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distance indicates an expected call of Distance
func (mr *MockParkingSlotMockRecorder) Distance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distance", reflect.TypeOf((*MockParkingSlot)(nil).Distance))
}

// Free mocks base method
func (m *MockParkingSlot) Free() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free
func (mr *MockParkingSlotMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockParkingSlot)(nil).Free))
}

// GetVehicle mocks base method
func (m *MockParkingSlot) GetVehicle() (vehicle.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle")
	ret0, _ := ret[0].(vehicle.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle
func (mr *MockParkingSlotMockRecorder) GetVehicle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockParkingSlot)(nil).GetVehicle))
}

// IsFree mocks base method
func (m *MockParkingSlot) IsFree() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFree")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFree indicates an expected call of IsFree
func (mr *MockParkingSlotMockRecorder) IsFree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFree", reflect.TypeOf((*MockParkingSlot)(nil).IsFree))
}

// ParkVehicle mocks base method
func (m *MockParkingSlot) ParkVehicle(arg0 vehicle.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParkVehicle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParkVehicle indicates an expected call of ParkVehicle
func (mr *MockParkingSlotMockRecorder) ParkVehicle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParkVehicle", reflect.TypeOf((*MockParkingSlot)(nil).ParkVehicle), arg0)
}
