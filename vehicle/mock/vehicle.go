// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/parking_lot/vehicle (interfaces: Vehicle)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVehicle is a mock of Vehicle interface
type MockVehicle struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleMockRecorder
}

// MockVehicleMockRecorder is the mock recorder for MockVehicle
type MockVehicleMockRecorder struct {
	mock *MockVehicle
}

// NewMockVehicle creates a new mock instance
func NewMockVehicle(ctrl *gomock.Controller) *MockVehicle {
	mock := &MockVehicle{ctrl: ctrl}
	mock.recorder = &MockVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicle) EXPECT() *MockVehicleMockRecorder {
	return m.recorder
}

// Color mocks base method
func (m *MockVehicle) Color() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Color")
	ret0, _ := ret[0].(string)
	return ret0
}

// Color indicates an expected call of Color
func (mr *MockVehicleMockRecorder) Color() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Color", reflect.TypeOf((*MockVehicle)(nil).Color))
}

// RegistrationNumber mocks base method
func (m *MockVehicle) RegistrationNumber() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrationNumber")
	ret0, _ := ret[0].(string)
	return ret0
}

// RegistrationNumber indicates an expected call of RegistrationNumber
func (mr *MockVehicleMockRecorder) RegistrationNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrationNumber", reflect.TypeOf((*MockVehicle)(nil).RegistrationNumber))
}
